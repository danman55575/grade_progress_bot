from aiogram import types, Dispatcher
from bot_manager import StQuiz, admin_id, bot, URI
from keyboards import adminreply
from aiogram.dispatcher.filters import IDFilter
from aiogram.dispatcher import FSMContext
import psycopg2


async def admintable(msg: types.Message):
    adminboard = types.InlineKeyboardMarkup(row_width=1)
    adminboard.add(types.InlineKeyboardButton(text='–í—ã–±–æ—Ä–∫–∞ –∏–∑ –±–¥', callback_data='look_table'),
                    types.InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞ —Å –±–¥', callback_data='change_table'),
                    types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='send'))
    await msg.answer(f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}, {msg.from_user.username}!\n–¢–≤–æ–π id: {msg.from_user.id}\n')
    try:
        with psycopg2.connect(URI) as db:
            db.autocommit = True
            cursor = db.cursor()
            cursor.execute("SELECT count(*) FROM my_users")
            count_users = cursor.fetchone()[0]
            cursor.execute("SELECT count(*) FROM comment")
            count_comments = cursor.fetchone()[0]
        await msg.answer(f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {count_comments}'
                         f'\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}', reply_markup=adminboard)
    except Exception as e:
        await msg.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Ç:\n{e}')



async def look_table(call: types.CallbackQuery):
    text = ''
    try:
        with psycopg2.connect(URI) as db:
            db.autocommit = True
            cursor = db.cursor()
            cursor.execute("SELECT id, user_name, comment FROM comment")
            for i in cursor.fetchmany(3):
                text += f'\n{i}'
            await call.message.answer(f'–í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 3-—Ö –æ—Ç–∑—ã–≤–æ–≤:{text}')
        await call.message.answer('–ñ–¥—É SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Öüïê')
        await StQuiz.look_table.set()
    except Exception as e:
        await call.message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Ç:\n{e}')


async def output_result(msg: types.Message, state: FSMContext):
    text = ''
    try:
        with psycopg2.connect(URI) as db:
            db.autocommit = True
            cursor = db.cursor()
            cursor.execute(msg.text)
            for i in cursor.fetchall():
                text += f'\n{i}'
            await msg.answer(f'‚úÖ–í—ã–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:{text}', reply_markup=adminreply())
    except Exception as e:
        await msg.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Ç:\n{e}')
    finally:
        await state.finish()


async def change_bd(call: types.CallbackQuery):
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å SQL-–∑–∞–ø—Ä–æ—Å')
    await call.answer('–í–ù–ï–°–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–î!')
    await StQuiz.del_note.set()


async def output_note(msg: types.Message, state: FSMContext):
    try:
        with psycopg2.connect(URI) as db:
            db.autocommit = True
            cursor = db.cursor()
            cursor.execute(msg.text)
            await msg.answer('–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', reply_markup=adminreply())
    except Exception as e:
        await msg.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Ç:\n{e}')
    finally:
        await state.finish()


async def notification_out(call: types.CallbackQuery):
    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞.\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π"
                              "–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–º –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await StQuiz.waiting_text_for_sending.set()


async def sending_process(message: types.Message):
    try:
        with psycopg2.connect(URI) as db:
            db.autocommit = True
            cursor = db.cursor()
            cursor.execute("SELECT user_id FROM my_users")
            all_id = cursor.fetchall()
            for user_id in all_id:
                await bot.send_message(chat_id=user_id[0], text=message.text)
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! {e}")




def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admintable, IDFilter(admin_id), commands='admin3027')
    dp.register_callback_query_handler(look_table, text='look_table')
    dp.register_message_handler(output_result, state=StQuiz.look_table)
    dp.register_callback_query_handler(change_bd, text='change_bd')
    dp.register_message_handler(output_note, state=StQuiz.del_note)
    dp.register_callback_query_handler(notification_out, text='send')
    dp.register_message_handler(sending_process, state=StQuiz.waiting_text_for_sending)
