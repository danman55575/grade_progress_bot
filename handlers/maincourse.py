from aiogram import Dispatcher
from bot_manager import dp, bot, StQuiz
from keyboards import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import re
data = {}
# data['amount_grades'] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫
# data['score_purpose'] - –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
# data['current_score'] - —Ç–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
# data['tap_amount'] - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫
# basa[(–æ—Ü–µ–Ω–∫–∞, –Ω–æ–º–µ—Ä –æ—Ü–µ–Ω–∫–∏, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª)] - –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ø–∏—Å–∫–µ


async def begin(call: types.CallbackQuery):
    global basa
    basa = []
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.', reply_markup=scoreboard())
    await StQuiz.waiting_purpose_score.set()


async def purpose_score(message: types.Message):
    global data
    try:
        data["score_purpose"] = float(message.text)
        if 2 < data["score_purpose"] <= 5:
            await message.answer('‚úÖ\n–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞üëá\n"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—åüìä" - –≤–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–º–µ—Ç–æ–∫\n"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æüßÆ" - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫', reply_markup=choose_way())
            await StQuiz.next()
        else:
            await message.answer('‚ùå\n–ú–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—à—åüòè–ù—É —Ç–∞–∫, –∫–∞–∫–æ–≤ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª?')
    except:
        await message.reply('‚ùå\n–û—à–∏–±–∫–∞üôÅ –í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –µ—â—ë —Ä–∞–∑.\n–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ '
                            '–¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —è –ø—Ä–∏–Ω–∏–º–∞—é "."\n–í–µ—Ä–Ω–æ    üëâ"4.50"\n–ù–µ–≤–µ—Ä–Ω–æ    üëâ"4,50".')


async def cross(message: types.Message):
    if message.text == '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—åüìä':
        await message.answer('‚úÖ\n–û—Ç–ª–∏—á–Ω–æ,—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ (–º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–∞)',
                             reply_markup=againboard())
        await StQuiz.next()
    elif message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æüßÆ':
        await message.answer('‚úÖ\n–¢–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç?', reply_markup=againboard())
        await StQuiz.waiting_present_score.set()
    elif message.text == '–ù–∞–∑–∞–¥‚Ü©':
        await message.answer('–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª, –∂–¥—É –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ªüïê', reply_markup=scoreboard())
        await StQuiz.waiting_purpose_score.set()
    else:
        await message.answer('–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞üëá')


async def list_calc(message: types.Message, state: FSMContext):
    global data, table, text
    try:
        if message.text == '–ù–∞–∑–∞–¥‚Ü©':
            await message.reply('<s>–ß—Ç–æ, –æ–ø—è—Ç—å?</s>\n–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞üëá', reply_markup=choose_way())
            await StQuiz.waiting_way_calc.set()
        else:
            text = ''
            grades = ''.join(re.split('[ ,\n]', message.text))
            data['summa'] = 0
            data['amount_grades'] = 0
            for grade in grades:
                data['summa'] += int(grade)
                data['amount_grades'] += 1
            await calc_grade(5, 0, data['score_purpose'], data['amount_grades'], data['summa'])
            await message.reply(f'–í–æ—Ç –æ—Ç–≤–µ—Ç:' + text, reply_markup=finishboard())
            await state.finish()
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞üôÅ\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –µ—â—ë —Ä–∞–∑.')


async def present_score(message: types.Message):
    global data
    try:
        if message.text == '–ù–∞–∑–∞–¥‚Ü©':
            await message.reply('–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞üëá', reply_markup=choose_way())
            await StQuiz.waiting_way_calc.set()
        else:
            data["current_score"] = float(message.text)
            if data["current_score"] >= data['score_purpose']:
                await message.reply('–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –±–æ–ª—å—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ, –≤–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –µ—â—ë —Ä–∞–∑.')
                await message.answer(f'–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª üëâ{data["score_purpose"]}'
                                     f'\n–¢–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª üëâ{data["current_score"]}')
            else:
                await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫', reply_markup=againboard())
                await StQuiz.next()
    except:
        await message.answer('‚ùå\n–û—à–∏–±–∫–∞üôÅ –í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –µ—â—ë —Ä–∞–∑.\n–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ '
                             '–¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —è –ø—Ä–∏–Ω–∏–º–∞—é "."\n‚ùå–ù–µ–≤–µ—Ä–Ω–æ    üëâ"4,50"\n‚úÖ–í–µ—Ä–Ω–æ    üëâ"4.50".')


async def amount_calc(message: types.Message, state: FSMContext):
    global data, table, text
    try:
        if message.text == '–ù–∞–∑–∞–¥‚Ü©':
            await message.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', reply_markup=againboard())
            await StQuiz.waiting_present_score.set()
        else:
            text = ''
            data['amount_grades'] = int(message.text)
            data['summa'] = data['current_score'] * data['amount_grades']
            await calc_grade(5, 0, data['score_purpose'], data['amount_grades'], data['summa'])
            await message.reply(f'–í–æ—Ç –æ—Ç–≤–µ—Ç:' + text, reply_markup=finishboard())
            await state.finish()
    except:
        await message.reply('‚ùå\n–û—à–∏–±–∫–∞üôÅ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫, —Å—Ç–æ—è—â–∏—Ö —É —Ç–µ–±—è –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, –µ—â—ë —Ä–∞–∑.')


async def calc_grade(grade, answer, score, amount, summa):
    global text, basa
    a = []
    nowscore = summa / amount
    while score > round(nowscore, 2):
        summa += grade
        amount += 1
        answer += 1
        nowscore = summa / amount
        a.append((grade, answer, round(nowscore, 4)))
        if answer > 99:
            text += f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ {grade} –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 99.'
            break
    if answer < 100:
        text += f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ "{grade}" —Ä–∞–≤–Ω–æ {answer}'
        if 0 < len(a) <= 5:
            for i in range(-1, -len(a) - 1, -1):
                basa.append(a[i])
        else:
            for i in range(-1, -6, -1):
                basa.append(a[i])
    if grade - 1 > score:
        await calc_grade(grade - 1, answer, score, amount, summa - answer)


async def table(message: types.Message):
    global basa, data
    score = data['score_purpose']
    basa.reverse()
    table3, table4, table5 = '', '', ''
    for i in basa:
        grade, answer, nowscore = i
        if grade == 5:
            table5 += f'\n–ü—Ä–∏ {answer:2}-–æ–π –æ—Ç–º–µ—Ç–∫–µ "5" —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:   üëâ{nowscore}'
        elif grade == 4:
            table4 += f'\n–ü—Ä–∏ {answer:2}-–æ–π –æ—Ç–º–µ—Ç–∫–µ "4" —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:  üëâ{nowscore}'
        elif grade == 3:
            table3 += f'\n–ü—Ä–∏ {answer:2}-–æ–π –æ—Ç–º–µ—Ç–∫–µ "3" —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:  üëâ{nowscore}'
    if table5 == '':
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ –±–æ–ª—å—à–µ 99!\n–ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏üëÜ', reply_markup=back())
    else:
        await message.answer(f'üìã–ú–∏–Ω–∏-—Ç–∞–±–µ–ª—å "–ü—Ä–æ–≥—Ä–µ—Å—Å" –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ "5":' + table5, reply_markup=finish2())
    if table4 != '':
        await message.answer(f'üìã–ú–∏–Ω–∏-—Ç–∞–±–µ–ª—å "–ü—Ä–æ–≥—Ä–µ—Å—Å" –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ "4":' + table4)
    if table3 != '':
        await message.answer(f'üìã–ú–∏–Ω–∏-—Ç–∞–±–µ–ª—å "–ü—Ä–æ–≥—Ä–µ—Å—Å" –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ "3":' + table3)


def get_keyboard():
    buttons = [types.InlineKeyboardButton(text="3", callback_data="num_3"),
        types.InlineKeyboardButton(text="4", callback_data="num_4"),
        types.InlineKeyboardButton(text="5", callback_data="num_5"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish"),
        types.InlineKeyboardButton(text="1", callback_data="num_1"),
        types.InlineKeyboardButton(text="2", callback_data="num_2")]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


async def cmd_numbers(message: types.Message):
    global data, addit
    addit = []
    data['current_score'] = data['summa'] / data['amount_grades']
    data['tap_amount'] = 0
    await message.answer(f"<b>–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É</b>üëá\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏:{addit}\n"
                         f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {data['current_score']}", reply_markup=get_keyboard())


async def update_num_text(message: types.Message, grade, addit):
    data['tap_amount'] += 1
    data['amount_grades'] += 1
    data['summa'] += int(grade)
    data['current_score'] = data['summa'] / data['amount_grades']
    await message.edit_text(f"<b>–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É</b>üëá\n"
                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏: {addit}\n–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {data['current_score']:.5}",
                            reply_markup=get_keyboard())


async def callbacks_num(call: types.CallbackQuery):
    global data, addit
    action = call.data.split("_")[1]
    if action == "5":
        addit.append('5')
        await update_num_text(call.message, 5, addit)
    elif action == "4":
        addit.append('4')
        await update_num_text(call.message, 4, addit)
    elif action == "3":
        addit.append('3')
        await update_num_text(call.message, 3, addit)
    elif action == "2":
        addit.append('2')
        await update_num_text(call.message, 2, addit)
    elif action == "1":
        addit.append('1')
        await update_num_text(call.message, 1, addit)
    elif action == "finish":
        await call.message.edit_text(f"–ò—Ç–æ–≥–æ:\n–í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {data['amount_grades']}"
                                     f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫: {data['tap_amount']}\n"
                                     f"–ò—Å—Ç–æ—Ä–∏—è –≤–≤–æ–¥–∞ –æ—Ç–º–µ—Ç–æ–∫: {addit}")
        await call.message.answer(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:  <b>{data['current_score']:.5}</b>"
                                  f"\n–¶–µ–ª–µ–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:  <b>{data['score_purpose']}</b>", reply_markup=back())
    await call.answer()


def register_handlers_maincourse(dp: Dispatcher):
    dp.register_callback_query_handler(begin, text='begin')
    dp.register_message_handler(purpose_score, state=StQuiz.waiting_purpose_score)
    dp.register_message_handler(cross, state=StQuiz.waiting_way_calc)
    dp.register_message_handler(list_calc, state=StQuiz.waiting_list_calc)
    dp.register_message_handler(present_score, state=StQuiz.waiting_present_score)
    dp.register_message_handler(amount_calc, state=StQuiz.waiting_amount_calc)
    dp.register_message_handler(table, text='–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µüìà')
    dp.register_message_handler(cmd_numbers, text='–ü—Ä–æ–≥–Ω–æ–∑')
    dp.register_callback_query_handler(callbacks_num, Text(startswith='num_'))
